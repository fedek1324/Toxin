"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["index_js"],{

/***/ "./blocks/form-elements-blocks/counter/b-counter.js":
/*!**********************************************************!*\
  !*** ./blocks/form-elements-blocks/counter/b-counter.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Counter\": () => (/* binding */ Counter)\n/* harmony export */ });\nclass Counter {\n  static initCounters() {\n    // Helper function to disable buttons and update value\n    function updateCounterValue(counter, value, amount) {\n      const counterMax = +counter.dataset.maxValue;\n      const counterMin = +counter.dataset.minValue;\n      const currentValue = +value.textContent; // Parse the current value as a number\n      const newValue = Math.min(Math.max(currentValue + amount, counterMin), counterMax);\n      const minusBtn = counter.querySelector('.b-counter__e-button_is-minus');\n      const plusBtn = counter.querySelector('.b-counter__e-button_is-plus');\n\n      value.textContent = newValue.toString(); // Convert the newValue back to string\n      minusBtn.disabled = newValue <= counterMin;\n      minusBtn.style.opacity = newValue <= counterMin ? '0.38' : '1';\n      minusBtn.classList.toggle('b-counter__e-button_disabled', newValue <= counterMin);\n\n      plusBtn.disabled = newValue >= counterMax;\n      plusBtn.classList.toggle('b-counter__e-button_disabled', newValue >= counterMax);\n    }\n\n    const counters = document.querySelectorAll('.b-counter');\n    counters.forEach((counter) => {\n      const minusBtn = counter.querySelector('.b-counter__e-button_is-minus');\n      const plusBtn = counter.querySelector('.b-counter__e-button_is-plus');\n      const value = counter.querySelector('.b-counter__e-value');\n      const initialValue = +value.textContent; // Parse the initial value as a number\n\n      minusBtn.onpointerdown = () => {\n        updateCounterValue(counter, value, -1);\n      };\n\n      plusBtn.onpointerdown = () => {\n        updateCounterValue(counter, value, 1);\n      };\n\n      // Initialize counter value based on initial value and limits\n      updateCounterValue(counter, value, 0);\n    });\n  }\n}\n\n\n//# sourceURL=webpack:///./blocks/form-elements-blocks/counter/b-counter.js?");

/***/ }),

/***/ "./blocks/form-elements-blocks/input-field/__calendar/calendar.js":
/*!************************************************************************!*\
  !*** ./blocks/form-elements-blocks/input-field/__calendar/calendar.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Calendar\": () => (/* binding */ Calendar)\n/* harmony export */ });\nclass Calendar {\r\n  constructor(datePicker, isRange) {\r\n    this.today = new Date();\r\n    this.currentMonth = this.today.getMonth() + 1; // like people count\r\n    this.currentYear = this.today.getFullYear();\r\n\r\n    this.startDate = null;\r\n    this.endDate = null;\r\n    this.calendar = null;\r\n    this.datePickerBlock = null;\r\n    this.inputWrapper = null;\r\n    this.input = null;\r\n\r\n    this.isRange = isRange;\r\n\r\n    this.initCalendar(datePicker);\r\n    // Generate the calendar for the current month\r\n    this.generateCalendar(this.currentYear, this.currentMonth);\r\n\r\n    this.addCellOnClick();\r\n  }\r\n\r\n  addCloseOnDocumentClickHandlers() {\r\n    const handleDocumentClick = (event) => {\r\n      const isInside = this.datePickerBlock.contains(event.target);\r\n      if (!isInside) {\r\n        // console.log('outer of input block click detected. closing block')\r\n        this.input.classList.remove('b-input-field__e-input_active-date-picker');\r\n        this.calendar.classList.remove('b-input-field__e-calendar_active');\r\n        document.removeEventListener('pointerdown', handleDocumentClick, true);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('pointerdown', handleDocumentClick, true);\r\n  }\r\n\r\n  initCalendar(datePicker) {\r\n    // Get the datepicker input element\r\n    this.datePickerBlock = datePicker;\r\n    this.inputWrapper = datePicker.querySelector('.b-input-field__e-input-wrapper');\r\n    this.input = datePicker.querySelector('.b-input-field__e-input');\r\n\r\n    // Create a date picker calendar\r\n    this.calendar = document.createElement('div');\r\n    this.calendar.classList.add('b-input-field__e-calendar');\r\n    this.datePickerBlock.append(this.calendar);\r\n    this.input.setAttribute('readonly', '');\r\n\r\n    // Event listener to toggle the calendar visibility\r\n    this.inputWrapper.addEventListener('pointerdown', (event) => {\r\n      event.preventDefault();\r\n      this.input.classList.toggle('b-input-field__e-input_active-date-picker');\r\n      this.calendar.classList.toggle('b-input-field__e-calendar_active');\r\n      this.addCloseOnDocumentClickHandlers();\r\n    });\r\n  }\r\n\r\n  // Function to generate the calendar HTML\r\n  generateCalendar(year, month) {\r\n    // should be waiting for addCloseOnDocumentClickHandlers proof that click was on input block\r\n    console.log('render calendar');\r\n    const firstDay = new Date(year, month - 1, 1).getDay();\r\n    const lastDate = new Date(year, month, 0).getDate();\r\n    const daysInPreviousMonth = new Date(year, month - 1, 0).getDate();\r\n    // Mapping for day index, where Monday is 0 and Sunday is 6\r\n    const dayIndexMap = [6, 0, 1, 2, 3, 4, 5];\r\n\r\n    let dayCounter = 0;\r\n    let tbodyContent = '';\r\n    let weekRow = '';\r\n\r\n    // Loop for the previous month dates\r\n    for (let i = dayIndexMap[firstDay] - 1; i >= 0; i--) {\r\n      const date = daysInPreviousMonth - i;\r\n      weekRow += `<td class=\"b-input-field__e-date b-input-field__e-date_disabled\">${date}</td>`;\r\n      dayCounter += 1;\r\n    }\r\n\r\n    // Loop for the current month dates\r\n    for (let i = 1; i <= lastDate; i++) {\r\n      const date = i;\r\n      const currentDate = new Date(year, month - 1, date);\r\n      // Check if it's the current date\r\n      const isCurrentDate = currentDate.toDateString() === new Date().toDateString();\r\n      let dateCellClass = 'b-input-field__e-date';\r\n      dateCellClass += isCurrentDate ? ' b-input-field__e-date_current-date' : '';\r\n      weekRow += `<td class=\"${dateCellClass}\">${date}</td>`;\r\n      dayCounter += 1;\r\n\r\n      if (dayCounter === 7) {\r\n        tbodyContent += `<tr class=\"b-input-field__e-week-row\" >${weekRow}</tr>`;\r\n        weekRow = '';\r\n        dayCounter = 0;\r\n      }\r\n    }\r\n\r\n    // Loop for the next month dates\r\n    let nextMonthDate = 1;\r\n    while (dayCounter < 7) {\r\n      weekRow += `<td class=\"b-input-field__e-date b-input-field__e-date_disabled\">${nextMonthDate}</td>`;\r\n      dayCounter += 1;\r\n      nextMonthDate += 1;\r\n    }\r\n\r\n    // Add the last row if it is not empty\r\n    if (weekRow !== '') {\r\n      tbodyContent += `<tr class=\"b-input-field__e-week-row\">${weekRow}</tr>`;\r\n    }\r\n\r\n    const monthName = new Date(year, month - 1, 1).toLocaleString('default', { month: 'long' });\r\n    const formattedTitle = `${monthName[0].toUpperCase() + monthName.slice(1)} ${year}`;\r\n\r\n    this.calendar.innerHTML = `\r\n        <div class=\"b-input-field__e-current-month-header\">\r\n          <button class=\"b-input-field__e-prev-month-btn\">arrow_back</button>\r\n          <span class=\"b-input-field__e-current-month\">${formattedTitle}</span>\r\n          <button class=\"b-input-field__e-next-month-btn\">arrow_forward</button>\r\n        </div>\r\n        <table class=\"b-input-field__e-table\">\r\n          <thead class=\"b-input-field__e-t-head\">\r\n            <tr class=\"b-input-field__e-weekdays\">\r\n              <th class=\"b-input-field__e-weekday\" scope=\"col\">Пн</th>\r\n              <th class=\"b-input-field__e-weekday\" scope=\"col\">Вт</th>\r\n              <th class=\"b-input-field__e-weekday\" scope=\"col\">Ср</th>\r\n              <th class=\"b-input-field__e-weekday\" scope=\"col\">Чт</th>\r\n              <th class=\"b-input-field__e-weekday\" scope=\"col\">Пт</th>\r\n              <th class=\"b-input-field__e-weekday\" scope=\"col\">Сб</th>\r\n              <th class=\"b-input-field__e-weekday\" scope=\"col\">Вс</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody class=\"b-input-field__e-t-body\">\r\n            ${tbodyContent}\r\n          </tbody>\r\n        </table>\r\n      `;\r\n    this.addMonthNavigationHandlers();\r\n  }\r\n\r\n  addMonthNavigationHandlers() {\r\n    // Event listeners for month navigation\r\n    const prevMonthBtn = this.calendar.querySelector('.b-input-field__e-prev-month-btn');\r\n    const nextMonthBtn = this.calendar.querySelector('.b-input-field__e-next-month-btn');\r\n\r\n    prevMonthBtn.addEventListener('pointerdown', (event) => {\r\n      event.preventDefault();\r\n      const newMonth = this.currentMonth === 1 ? 12 : this.currentMonth - 1;\r\n      const newYear = this.currentMonth === 1 ? this.currentYear - 1 : this.currentYear;\r\n      this.updateCalendar(newYear, newMonth);\r\n      this.highlightRange();\r\n    });\r\n\r\n    nextMonthBtn.addEventListener('pointerdown', (event) => {\r\n      event.preventDefault();\r\n      // waiting for addCloseOnDocumentClickHandlers proof that click was on input block\r\n      this.currentMonth = this.currentMonth === 12 ? 1 : this.currentMonth + 1;\r\n      this.currentYear = this.currentMonth === 12 ? this.currentYear + 1 : this.currentYear;\r\n      this.updateCalendar(this.currentYear, this.currentMonth);\r\n      this.highlightRange();\r\n    });\r\n  }\r\n\r\n  // Function to update the calendar body for the given month and year\r\n  updateCalendar(year, month) {\r\n    this.currentYear = year;\r\n    this.currentMonth = month;\r\n    this.generateCalendar(year, month);\r\n  }\r\n\r\n  addCellOnClick() {\r\n    // Event listener for date selection using event delegation\r\n    this.calendar.addEventListener('pointerdown', (event) => {\r\n      const cell = event.target;\r\n      if (cell.tagName === 'TD' && !cell.classList.contains('b-input-field__e-date_disabled')) {\r\n        const date = parseInt(cell.textContent, 10);\r\n        const selectedDate = new Date(this.currentYear, this.currentMonth - 1, date);\r\n        if (this.isRange) {\r\n          this.handleClickIfRange(selectedDate, event);\r\n        } else {\r\n          this.handleClickIfOneDate(selectedDate, event);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  handleClickIfRange(selectedDate, event) {\r\n    const cell = event.target;\r\n    // Check if start date is not set\r\n    if (!this.startDate) {\r\n      this.startDate = selectedDate;\r\n      this.endDate = null;\r\n      cell.classList.add('b-input-field__e-date_picked');\r\n    } else if (this.startDate && !this.endDate) { // Check if only start date is set\r\n      if (this.startDate < selectedDate) { // ok. no swap\r\n        this.endDate = selectedDate;\r\n        cell.classList.add('b-input-field__e-date_picked');\r\n      } else {\r\n        cell.classList.add('b-input-field__e-date_picked');\r\n        this.endDate = this.startDate;\r\n        this.startDate = selectedDate;\r\n      }\r\n    } else if (this.startDate && this.endDate) { // Check if both start and end dates are set\r\n      this.startDate = selectedDate;\r\n      this.endDate = null;\r\n      this.removeRangeAndPickedDates();\r\n      cell.classList.add('b-input-field__e-date_picked');\r\n    }\r\n\r\n    // Check if both start and end dates are set\r\n    if (this.startDate && this.endDate) {\r\n      const formattedStartDate = this.formatDate(this.startDate);\r\n      const formattedEndDate = this.formatDate(this.endDate);\r\n      this.input.value = `${formattedStartDate} - ${formattedEndDate}`;\r\n      this.highlightRange();\r\n    } else if (this.startDate && !this.endDate) {\r\n      const formattedStartDate = this.formatDate(this.startDate);\r\n      this.input.value = formattedStartDate;\r\n    }\r\n  }\r\n\r\n  removeRangeAndPickedDates() {\r\n    // Dehighlight the selected date range\r\n    const highlightedCells = this.calendar.querySelectorAll('.b-input-field__e-date_selected');\r\n    highlightedCells.forEach((cell) => {\r\n      cell.classList.remove('b-input-field__e-date_selected');\r\n    });\r\n\r\n    const pickedCells = this.calendar.querySelectorAll('.b-input-field__e-date_picked');\r\n    pickedCells.forEach((cell) => {\r\n      cell.classList.remove('b-input-field__e-date_picked');\r\n    });\r\n\r\n    const firstPickedCell = this.calendar.querySelector('.b-input-field__e-date_first');\r\n    firstPickedCell?.classList?.remove('b-input-field__e-date_first');\r\n\r\n    const secondPickedCell = this.calendar.querySelector('.b-input-field__e-date_last');\r\n    secondPickedCell?.classList?.remove('b-input-field__e-date_last');\r\n  }\r\n\r\n  handleClickIfOneDate(selectedDate, event) {\r\n    const cell = event.target;\r\n    const pickedDate = document.querySelector('.b-input-field__e-date_picked');\r\n    if (pickedDate) {\r\n      pickedDate.classList.remove('b-input-field__e-date_picked');\r\n    }\r\n    const formattedDate = this.formatDate(selectedDate);\r\n    this.input.value = formattedDate;\r\n    cell.classList.add('b-input-field__e-date_picked');\r\n  }\r\n\r\n  highlightRange() {\r\n    console.log('highlightRange');\r\n\r\n    // Highlight the selected date range\r\n    if (!this.startDate || !this.endDate) {\r\n      return;\r\n    }\r\n\r\n    console.log('highlighting');\r\n    const cells = this.calendar.querySelectorAll('td');\r\n    for (let i = 0; i < cells.length; i += 1) {\r\n      const cell = cells[i];\r\n      const cellDate = +cell.textContent;\r\n\r\n      let cellDateObj;\r\n      if (cellDate - i > 15) {\r\n        // we get prev month dates here\r\n        const jsMonth = this.currentMonth - 1; // to 0..11 format\r\n        const month = jsMonth === 0 ? 11 : jsMonth - 1;\r\n        cellDateObj = new Date(this.currentYear, month, cellDate);\r\n      } else if (cellDate - i < -15) {\r\n        // we get next month dates here\r\n        const jsMonth = this.currentMonth - 1; // to 0..11 format\r\n        const month = jsMonth === 11 ? 0 : jsMonth + 1;\r\n        cellDateObj = new Date(this.currentYear, month, cellDate);\r\n      } else {\r\n        const jsMonth = this.currentMonth - 1; // to 0..11 format\r\n        cellDateObj = new Date(this.currentYear, jsMonth, cellDate);\r\n      }\r\n\r\n      if (this.startDate.getTime() <= cellDateObj.getTime()\r\n        && cellDateObj.getTime() <= this.endDate.getTime()) {\r\n        cell.classList.add('b-input-field__e-date_selected');\r\n        if (cellDateObj.getTime() === this.startDate.getTime()) {\r\n          cell.classList.add('b-input-field__e-date_first');\r\n          cell.classList.add('b-input-field__e-date_picked');\r\n        } else if (cellDateObj.getTime() === this.endDate.getTime()) {\r\n          cell.classList.add('b-input-field__e-date_last');\r\n          cell.classList.add('b-input-field__e-date_picked');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Function to format the date as \"dd.mm.yyyy\"\r\n  formatDate(date) {\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const year = date.getFullYear();\r\n\r\n    const formattedDate = date.toLocaleString('ru', {\r\n      day: '2-digit',\r\n      month: 'short',\r\n    });\r\n    if (this.isRange) {\r\n      return formattedDate.slice(0, -1);\r\n    }\r\n    return `${day}.${month}.${year}`;\r\n  }\r\n\r\n  static initCalendars() {\r\n    const singleDatePickers = document.getElementsByClassName('b-input-field_is-single-date-picker');\r\n    for (let i = 0; i < singleDatePickers.length; i += 1) {\r\n      const singleDatePicker = singleDatePickers[i];\r\n      singleDatePicker.disabled = true;\r\n      new Calendar(singleDatePicker, false);\r\n    }\r\n\r\n    const rangeDatePickers = document.getElementsByClassName('b-input-field_is-range-date-picker');\r\n    for (let i = 0; i < rangeDatePickers.length; i += 1) {\r\n      const rangeDatePicker = rangeDatePickers[i];\r\n      rangeDatePicker.disabled = true;\r\n      new Calendar(rangeDatePicker, true);\r\n    }\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack:///./blocks/form-elements-blocks/input-field/__calendar/calendar.js?");

/***/ }),

/***/ "./blocks/form-elements-blocks/input-field/b-input-field.js":
/*!******************************************************************!*\
  !*** ./blocks/form-elements-blocks/input-field/b-input-field.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"InputField\": () => (/* binding */ InputField)\n/* harmony export */ });\nclass InputField {\n  static initDropdowns() {\n    for (let i = 0; i < document.getElementsByClassName('b-input-field_is-dropdown').length; i++) {\n      const inputBlock = document.getElementsByClassName('b-input-field_is-dropdown')[i];\n\n      const inputWrapper = inputBlock.querySelector('.b-input-field__e-input-wrapper');\n      // const dropdownIcon = inputBlock.querySelector('.b-input-field__e-icon_is-chevron-icon');\n      const dropdownContent = inputBlock.querySelector('.b-input-field__e-dropdown');\n      const input = inputBlock.querySelector('.b-input-field__e-input_is-dropdown');\n\n      if (inputBlock.matches('.b-input-field_has-counters-text-no-buttons')) {\n        setCounterValuesAsText();\n        dropdownContent.addEventListener(\"pointerdown\", setCounterValuesAsText, { passive: true });\n      }\n\n      if (inputBlock.matches('.b-input-field_has-counters-apply-button')) {\n\n      }\n\n      dropdownContent.hidden = true;\n      input.setAttribute('readonly', '');\n      let enabled = false;\n      dropdownContent.style.width = `${input.offsetWidth}px`;\n      inputWrapper.onpointerdown = onclick;\n\n      if (inputBlock.dataset.openByDefault || inputBlock.dataset.openByDefault === '') {\n        onclick();\n      }\n\n      function onclick(event) {\n        event?.preventDefault();\n        enabled = !enabled;\n        input.classList.toggle('b-input-field__e-input_active-dropdown');\n        dropdownContent.hidden = !enabled;\n\n        document.addEventListener('pointerdown', handleDocumentClick, { passive: true });\n      }\n\n      function setCounterValuesAsText() {\n        input.value = \"\";\n        const counters = dropdownContent.querySelectorAll('.b-counter');\n        counters.forEach((counter) => {\n          const counterTextEl = counter.querySelector('.b-counter__e-text');\n          const counterText = counterTextEl.textContent;\n          const counterValueEl = counter.querySelector('.b-counter__e-value');\n          const counterValue = +counterValueEl.textContent;\n          input.value += `${formatWords(counterValue, counterText)}, `;\n        });\n      }\n\n      function handleDocumentClick(event) {\n        const isInside = inputBlock.contains(event.target);\n        if (!isInside) {\n          enabled = false;\n          input.classList.remove('b-input-field__e-input_active-dropdown');\n          dropdownContent.hidden = true;\n          document.removeEventListener('pointerdown', handleDocumentClick, { passive: true });\n        }\n      }\n\n      function formatWords(num, word) {\n        let ending = \"\";\n        if (word === \"спальни\") {\n          if (num === 1 || (num > 20 && num % 10 === 1)) {\n            ending = \"спальня\";\n          } else if (num > 1 && num < 5) {\n            ending = \"спальни\";\n          } else {\n            ending = \"спален\";\n          }\n        }\n        if (word === \"кровати\") {\n          if (num === 1 || (num > 20 && num % 10 === 1)) {\n            ending = \"кровать\";\n          } else if (num > 1 && num < 5) {\n            ending = \"кровати\";\n          } else {\n            ending = \"кроватей\";\n          }\n        }\n        if (word === \"ванные комнаты\") {\n          if (num === 1 || (num > 20 && num % 10 === 1)) {\n            ending = \"ванная комната\";\n          } else if (num > 1 && num < 5) {\n            ending = \"ванные комнаты\";\n          } else {\n            ending = \"ванных комнат\";\n          }\n        }\n        return num + \" \" + ending;\n      }\n    }\n  }\n}\n\n\n//# sourceURL=webpack:///./blocks/form-elements-blocks/input-field/b-input-field.js?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _blocks_form_elements_blocks_input_field_calendar_calendar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./blocks/form-elements-blocks/input-field/__calendar/calendar */ \"./blocks/form-elements-blocks/input-field/__calendar/calendar.js\");\n/* harmony import */ var _blocks_form_elements_blocks_input_field_b_input_field__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./blocks/form-elements-blocks/input-field/b-input-field */ \"./blocks/form-elements-blocks/input-field/b-input-field.js\");\n/* harmony import */ var _blocks_form_elements_blocks_counter_b_counter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./blocks/form-elements-blocks/counter/b-counter */ \"./blocks/form-elements-blocks/counter/b-counter.js\");\n\n\n\n\n_blocks_form_elements_blocks_input_field_calendar_calendar__WEBPACK_IMPORTED_MODULE_0__.Calendar.initCalendars();\n_blocks_form_elements_blocks_counter_b_counter__WEBPACK_IMPORTED_MODULE_2__.Counter.initCounters();\n_blocks_form_elements_blocks_input_field_b_input_field__WEBPACK_IMPORTED_MODULE_1__.InputField.initDropdowns(); // hides already inited nodes\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);